/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * This file is part of SableCC.                             *
 * See the file "LICENSE" for copyright information and the  *
 * terms and conditions for copying, distribution and        *
 * modification of SableCC.                                  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Macro:GenAnalysisHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import $1$.*;
/**
 * Visitor for AST nodes. Contains one method per node class. 
 * 
 * @param <OutT> Return type of visitation methods
 * @param <InT> Type of a helper object passed into visitation methods
 */
public interface GenericAnalysis<OutT,InT> extends GenericSwitch<OutT,InT>
{

$
Macro:GenAnalysisStart
	/**
	 * Do something with the Start node. 
	 *
	 * @param node the Start node
	 * @param helper some helper object (e.g. a variable binding context)
	 * @return some OutT value (or null)
	 */
    OutT caseStart(Start node, InT helper);

$

Macro:GenAnalysisBody
	/**
	 * Do something with a $0$ node. 
	 *
	 * @param node the $0$ node
	 * @param helper some helper object (e.g. a variable binding context)
	 * @return some OutT value computed from the node (or null)
	 */
    OutT case$0$($0$ node, InT helper);

$

Macro:GenAnalysisTail
	/**
	 * Do something with the EOF node (the last child of the Star node) 
	 *
	 * @param node the EOF node
	 * @param helper some helper object (e.g. a variable binding context)
	 * @return some OutT value computed from the node (or null)
	 */
    OutT caseEOF(EOF node, InT helper);
}

$

Macro:GenAnalysisAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

/**
 * Default implementation of the visitor interface.
 * <p>
 * This implementation does not recurse into child nodes for you
 * -- you may want to use a GenericDepthFirstAdapter for that. 
 *
 * @param <OutT> Return type of visitation methods
 * @param <InT> Type of a helper object passed into visitation methods
 */
public class GenericAnalysisAdapter<OutT,InT> implements GenericAnalysis<OutT,InT>
{

$

Macro:GenAnalysisAdapterStart

	/**
	 * Visit a Start node.
	 * @param node the Start node
	 * @param helper the helper object
	 * @return some OutT value (may be null)
	 */
    public OutT caseStart(Start node, InT helper)
    {
        return defaultCase(node,helper);
    }

$

Macro:GenAnalysisAdapterBody

	/**
	 * Visit a $0$ node.
	 * @param node the $0$ node
	 * @param helper the helper object
	 * @return some OutT value (may be null)
	 */
     @Override
    public OutT case$0$($0$ node, InT helper)
    {
         return defaultCase(node, helper);
    }

$

Macro:GenAnalysisAdapterTail

	/**
	 * Visit the EOF node.
	 * @param node the EOF node
	 * @param helper your helper object
	 * @return some OutT value (maybe null)
	 */
    public OutT caseEOF(EOF node, InT helper)
    {
       return defaultCase(node,helper);
    }

	/**
	 * This method will be called by the default implementations
	 * of all node methods.
	 * @param node the node
	 * @param helper your helper object
	 * @return some OutT value (maybe null)
	 */
    public OutT defaultCase(@SuppressWarnings("unused") Node node, InT helper)
    {
        // do nothing
        return null;
    }
}

$

Macro:GenDepthFirstAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

/**
 * Base class for depth-first traversal visitors which
 * visit the children left-to-right.
 * <p>
 * Subclass this to taste. Your subclassed visitor can 
 * <ul>
 *  <li> compute values of type OutT based on the nodes and return them
 *         (overriding mainly the caseXXX methods) 
 *   </li>
 *   <li> update fields of your visitor
 *         (overriding mainly the inXXX and outXXX methods)  
 *   </li>
 * </ul>
 * Or a mixture of both styles.
 *
 * @param <OutT> Return type of visitation methods
 * @param <InT> Type of a helper object passed into visitation methods
 */
public class GenericDepthFirstAdapter<OutT,InT> extends GenericAnalysisAdapter<OutT,InT>
{
	/**
	 * This method will be called before visiting the Start node
	 * @param node the Start node.
	 */
    protected void inStart(Start node, InT helper)
    {
        defaultIn(node, helper);
    }

    /**
	 * This method will be called after visiting the Start node
	 * @param node the Start node.
	 */
    protected OutT outStart(Start node, InT helper)
    {
        return defaultOut(node,helper);
    }

	/**
	 * Default implementation of before-visit methods.
	 * @param node the node which will be visited next
	 * @param helper the helper object
	 */
    protected void defaultIn(@SuppressWarnings("unused") Node node, InT helper)
    {
        // Do nothing
    }

	/**
	 * Default implementation of after-visit methods.
	 * @param node the node which has been visited
	 * @return some OutT value (or null)
	 */
    protected OutT defaultOut(@SuppressWarnings("unused") Node node, InT helper)
    {
        // Do nothing
        return null;
    }

	/**
	 * Default implementation of visitation for the Start node.
	 * Override this if you want to compute something from the OutT results
	 * of visiting the subnodes.
	 * 
	 * @param node the node which has been visited
	 * @return some OutT value (or null)
	 */
    @Override
    public OutT caseStart(Start node, InT helper)
    {
        inStart(node, helper);
        node.get$2$().apply(this, helper);
        node.getEOF().apply(this, helper);
        return outStart(node,helper);
    }

$

Macro:GenReversedDepthFirstAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

/**
 * Base class for depth-first traversal visitors which visit
 * the children right-to-left. 
 *
 * @param <OutT> Return type of visitation methods
 * @param <InT> Type of a helper object passed into visitation methods
 */
public class GenericReversedDepthFirstAdapter<OutT,InT> extends GenericAnalysisAdapter<OutT,InT>
{
    protected void inStart(Start node, InT helper)
    {
        defaultIn(node, helper);
    }

    protected OutT outStart(Start node, InT helper)
    {
       return defaultOut(node, helper);
    }

    protected void defaultIn(@SuppressWarnings("unused") Node node, InT helper)
    {
        // Do nothing
    }

    protected OutT defaultOut(@SuppressWarnings("unused") Node node, InT helper)
    {
        // Do nothing
        return null;
    }

    @Override
    public OutT caseStart(Start node, InT helper)
    {
        inStart(node, helper);
        node.getEOF().apply(this, helper);
        node.get$2$().apply(this, helper);
       return outStart(node,helper);
    }

$

Macro:GenDepthFirstAdapterInOut

	/**
	 * Prepare for visiting a $0$.
	 * @param node the $0$ node to visit
	 * @param helper the helper object
	 */ 
    protected void in$0$($0$ node, InT helper)
    {
        defaultIn(node, helper);
    }

	/**
	 * Do something after visiting a $0$.
	 * @param node the $0$ node that has been visited
	 * @param helper the helper object
	 * @return something computed from node (or null)
	 */ 
    protected OutT out$0$($0$ node, InT helper)
    {
      	return defaultOut(node,helper);
    }

$

Macro:GenDepthFirstAdapterCaseHeader

	/**
	 * Visiting a $0$. If you don't override this,
	 * this method will call in$0$, followed by 
	 * applying this visitor to every child node (discarding the OutT result),
	 * then call out$0$ and return its result.
	 * 
	 * @param node the $0$ node to visit
	 * @param helper the helper object
	 * @return some OutT or null
	 */ 
    @Override
    public OutT case$0$($0$ node, InT helper)
    {
        in$0$(node, helper);

$

Macro:GenDepthFirstAdapterCaseBodyNode
        if(node.get$0$() != null)
        {
            node.get$0$().apply(this, helper);
        }

$

Macro:GenDepthFirstAdapterCaseBodyList
        {
            List<$1$> copy = new ArrayList<$1$>(node.get$0$());
            for($1$ e : copy)
            {
                e.apply(this, helper);
            }
        }

$

Macro:GenReversedDepthFirstAdapterCaseBodyList
        {
            List<$1$> copy = new ArrayList<$1$>(node.get$0$());
            Collections.reverse(copy);
            for($1$ e : copy)
            {
                e.apply(this, helper);
            }
        }

$

Macro:GenDepthFirstAdapterCaseTail
        return out$0$(node,helper);
    }

$

Macro:GenDepthFirstAdapterTail
}

$


