/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * This file is part of SableCC.                             *
 * See the file "LICENSE" for copyright information and the  *
 * terms and conditions for copying, distribution and        *
 * modification of SableCC.                                  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Macro:GenAnalysisHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import $1$.*;

public interface GenericAnalysis<OutT,InT> extends GenericSwitch<OutT,InT>, Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);


$
Macro:GenAnalysisStart
    OutT caseStart(Start node, InT helper);

$

Macro:GenAnalysisBody
    OutT case$0$($0$ node, InT helper);

$

Macro:GenAnalysisTail
    OutT caseEOF(EOF node, InT helper);
}

$

Macro:GenAnalysisAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

public class GenericAnalysisAdapter<OutT,InT> implements GenericAnalysis<OutT,InT>
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

$

Macro:GenAnalysisAdapterStart

    public OutT caseStart(Start node, InT helper)
    {
        return defaultCase(node,helper);
    }

$

Macro:GenAnalysisAdapterBody

     @Override
    public OutT case$0$($0$ node, InT helper)
    {
         return defaultCase(node, helper);
    }

$

Macro:GenAnalysisAdapterTail

    public OutT caseEOF(EOF node, InT helper)
    {
       return defaultCase(node,helper);
    }

    public OutT defaultCase(@SuppressWarnings("unused") Node node, InT helper)
    {
        // do nothing
        return null;
    }
}

$

Macro:GenDepthFirstAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

public class GenericDepthFirstAdapter<OutT,InT> extends GenericAnalysisAdapter<OutT,InT>
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public OutT outStart(Start node, InT helper)
    {
     return  defaultOut(node,helper);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public OutT defaultOut(@SuppressWarnings("unused") Node node, InT helper)
    {
        // Do nothing
        return null;
    }

    @Override
    public OutT caseStart(Start node, InT helper)
    {
        inStart(node);
        node.get$2$().apply(this, helper);
        node.getEOF().apply(this, helper);
        return outStart(node,helper);
    }

$

Macro:GenReversedDepthFirstAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

public class GenericReversedDepthFirstAdapter<OutT,InT> extends GenericAnalysisAdapter<OutT,InT>
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public OutT outStart(Start node, InT helper)
    {
       return defaultOut(node, helper);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public OutT defaultOut(@SuppressWarnings("unused") Node node, InT helper)
    {
        // Do nothing
        return null;
    }

    @Override
    public OutT caseStart(Start node, InT helper)
    {
        inStart(node);
        node.getEOF().apply(this, helper);
        node.get$2$().apply(this, helper);
       return outStart(node,helper);
    }

$

Macro:GenDepthFirstAdapterInOut

    public void in$0$($0$ node)
    {
        defaultIn(node);
    }

    public OutT out$0$($0$ node, InT helper)
    {
      return   defaultOut(node,helper);
    }

$

Macro:GenDepthFirstAdapterCaseHeader

    @Override
    public OutT case$0$($0$ node, InT helper)
    {
        in$0$(node);

$

Macro:GenDepthFirstAdapterCaseBodyNode
        if(node.get$0$() != null)
        {
            node.get$0$().apply(this, helper);
        }

$

Macro:GenDepthFirstAdapterCaseBodyList
        {
            List<$1$> copy = new ArrayList<$1$>(node.get$0$());
            for($1$ e : copy)
            {
                e.apply(this, helper);
            }
        }

$

Macro:GenReversedDepthFirstAdapterCaseBodyList
        {
            List<$1$> copy = new ArrayList<$1$>(node.get$0$());
            Collections.reverse(copy);
            for($1$ e : copy)
            {
                e.apply(this, helper);
            }
        }

$

Macro:GenDepthFirstAdapterCaseTail
        return out$0$(node,helper);
    }

$

Macro:GenDepthFirstAdapterTail
}

$


